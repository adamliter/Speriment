#!/usr/bin/env python

from sqlalchemy import create_engine, MetaData, Table
import json
import pandas as pd
import sys

def retrieve(db_url, table_name, exclude = []):
    # db_url = "mysql://username:password@host.org/database_name"
    # table_name = 'my_experiment_table'
    data_column_name = 'datastring'
    # boilerplace sqlalchemy setup
    engine = create_engine(db_url)
    metadata = MetaData()
    metadata.bind = engine
    table = Table(table_name, metadata, autoload=True)
    # make a query and loop through
    s = table.select()
    rows = s.execute()

    #status codes of subjects who completed experiment
    statuses = [3,4,5,7]

    #column to retrieve
    data_column_name = 'datastring'

    # filter participants
    excluded = exclude.split()
    data = [participant[data_column_name] for participant in rows
            if participant['status'] in statuses
            and participant['uniqueid'] not in exclude]
    return data

def format_data(data, user_defined_columns):
    # parse each participant's datastring as json object
    participants = [json.loads(participant) for participant in data]
    user_column_list = user_defined_columns.split()

    trialdata_column_names = [
        'PageID',
        'PageText',
        'BlockIDs',
        'StartTime',
        'EndTime',
        'Iteration',
        'Condition',
        'SelectedID',
        'SelectedText',
        'Correct',
        'OptionOrder',
        'SelectedPosition'
    ]
    num_trialdata_names = len(trialdata_column_names)
    trial_column_names = [
        'UniqueID',
        'TrialNumber',
        'Version',
        'HIT',
        'WorkerID',
    ]
    column_names = trialdata_column_names + trial_column_names + user_column_list

    # push important information into 'trialdata' subobjects
    for participant in participants:
        for trial in participant['data']:
            trial['trialdata'] = trial['trialdata'][:num_trialdata_names] + [
                    trial['uniqueid'],
                    trial['current_trial'],
                    participant['condition'],
                    participant['hitId'],
                    participant['workerId']
                ] + trial['trialdata'][num_trialdata_names:]

    # extract just trialdata objects
    trials = [trial['trialdata']
            for participant in participants
            for trial in participant['data']]


    data_frame = pd.DataFrame(trials, columns = column_names)
    data_frame['ReactionTime'] = data_frame['EndTime'] - data_frame['StartTime']
    return data_frame

if __name__ == '__main__':
    # usage: python retrieve_data db_url table_name filename user_defined_columns exclude
    # bash can't take lists as arguments so format lists like "item1 item2
    # item3"
    db_url = sys.argv[1]
    table_name = sys.argv[2]
    filename = sys.argv[3]
    user_defined_columns = ''
    if len(sys.argv) > 4:
        user_defined_columns = sys.argv[4]
    exclude = ''
    if len(sys.argv) > 5:
        exclude = sys.argv[5]

    data = retrieve(db_url, table_name, exclude)
    formatted = format_data(data, user_defined_columns)
    formatted.to_csv(filename)
